{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/riot/riot.js","src/main.js","src/riot-tags/basic-adder.tag","src/riot-tags/item-list.tag","src/riot-tags/to-do.tag"],"names":[],"mappingsjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* Riot v2.2.4, @license MIT, (c) 2015 Muut Inc. + contributors */\n\n;(function(window, undefined) {\n  'use strict';\nvar riot = { version: 'v2.2.4', settings: {} },\n  //// be aware, internal usage\n\n  // counter to give a unique id to all the Tag instances\n  __uid = 0,\n\n  // riot specific prefixes\n  RIOT_PREFIX = 'riot-',\n  RIOT_TAG = RIOT_PREFIX + 'tag',\n\n  // for typeof == '' comparisons\n  T_STRING = 'string',\n  T_OBJECT = 'object',\n  T_UNDEF  = 'undefined',\n  T_FUNCTION = 'function',\n  // special native tags that cannot be treated like the others\n  SPECIAL_TAGS_REGEX = /^(?:opt(ion|group)|tbody|col|t[rhd])$/,\n  RESERVED_WORDS_BLACKLIST = ['_item', '_id', 'update', 'root', 'mount', 'unmount', 'mixin', 'isMounted', 'isLoop', 'tags', 'parent', 'opts', 'trigger', 'on', 'off', 'one'],\n\n  // version# for IE 8-11, 0 for others\n  IE_VERSION = (window && window.document || {}).documentMode | 0,\n\n  // Array.isArray for IE8 is in the polyfills\n  isArray = Array.isArray\n\nriot.observable = function(el) {\n\n  el = el || {}\n\n  var callbacks = {},\n      _id = 0\n\n  el.on = function(events, fn) {\n    if (isFunction(fn)) {\n      if (typeof fn.id === T_UNDEF) fn._id = _id++\n\n      events.replace(/\\S+/g, function(name, pos) {\n        (callbacks[name] = callbacks[name] || []).push(fn)\n        fn.typed = pos > 0\n      })\n    }\n    return el\n  }\n\n  el.off = function(events, fn) {\n    if (events == '*') callbacks = {}\n    else {\n      events.replace(/\\S+/g, function(name) {\n        if (fn) {\n          var arr = callbacks[name]\n          for (var i = 0, cb; (cb = arr && arr[i]); ++i) {\n            if (cb._id == fn._id) arr.splice(i--, 1)\n          }\n        } else {\n          callbacks[name] = []\n        }\n      })\n    }\n    return el\n  }\n\n  // only single event supported\n  el.one = function(name, fn) {\n    function on() {\n      el.off(name, on)\n      fn.apply(el, arguments)\n    }\n    return el.on(name, on)\n  }\n\n  el.trigger = function(name) {\n    var args = [].slice.call(arguments, 1),\n        fns = callbacks[name] || []\n\n    for (var i = 0, fn; (fn = fns[i]); ++i) {\n      if (!fn.busy) {\n        fn.busy = 1\n        fn.apply(el, fn.typed ? [name].concat(args) : args)\n        if (fns[i] !== fn) { i-- }\n        fn.busy = 0\n      }\n    }\n\n    if (callbacks.all && name != 'all') {\n      el.trigger.apply(el, ['all', name].concat(args))\n    }\n\n    return el\n  }\n\n  return el\n\n}\nriot.mixin = (function() {\n  var mixins = {}\n\n  return function(name, mixin) {\n    if (!mixin) return mixins[name]\n    mixins[name] = mixin\n  }\n\n})()\n\n;(function(riot, evt, win) {\n\n  // browsers only\n  if (!win) return\n\n  var loc = win.location,\n      fns = riot.observable(),\n      started = false,\n      current\n\n  function hash() {\n    return loc.href.split('#')[1] || ''   // why not loc.hash.splice(1) ?\n  }\n\n  function parser(path) {\n    return path.split('/')\n  }\n\n  function emit(path) {\n    if (path.type) path = hash()\n\n    if (path != current) {\n      fns.trigger.apply(null, ['H'].concat(parser(path)))\n      current = path\n    }\n  }\n\n  var r = riot.route = function(arg) {\n    // string\n    if (arg[0]) {\n      loc.hash = arg\n      emit(arg)\n\n    // function\n    } else {\n      fns.on('H', arg)\n    }\n  }\n\n  r.exec = function(fn) {\n    fn.apply(null, parser(hash()))\n  }\n\n  r.parser = function(fn) {\n    parser = fn\n  }\n\n  r.stop = function () {\n    if (started) {\n      if (win.removeEventListener) win.removeEventListener(evt, emit, false) //@IE8 - the if()\n      else win.detachEvent('on' + evt, emit) //@IE8\n      fns.off('*')\n      started = false\n    }\n  }\n\n  r.start = function () {\n    if (!started) {\n      if (win.addEventListener) win.addEventListener(evt, emit, false) //@IE8 - the if()\n      else win.attachEvent('on' + evt, emit) //IE8\n      started = true\n    }\n  }\n\n  // autostart the router\n  r.start()\n\n})(riot, 'hashchange', window)\n/*\n\n//// How it works?\n\n\nThree ways:\n\n1. Expressions: tmpl('{ value }', data).\n   Returns the result of evaluated expression as a raw object.\n\n2. Templates: tmpl('Hi { name } { surname }', data).\n   Returns a string with evaluated expressions.\n\n3. Filters: tmpl('{ show: !done, highlight: active }', data).\n   Returns a space separated list of trueish keys (mainly\n   used for setting html classes), e.g. \"show highlight\".\n\n\n// Template examples\n\ntmpl('{ title || \"Untitled\" }', data)\ntmpl('Results are { results ? \"ready\" : \"loading\" }', data)\ntmpl('Today is { new Date() }', data)\ntmpl('{ message.length > 140 && \"Message is too long\" }', data)\ntmpl('This item got { Math.round(rating) } stars', data)\ntmpl('<h1>{ title }</h1>{ body }', data)\n\n\n// Falsy expressions in templates\n\nIn templates (as opposed to single expressions) all falsy values\nexcept zero (undefined/null/false) will default to empty string:\n\ntmpl('{ undefined } - { false } - { null } - { 0 }', {})\n// will return: \" - - - 0\"\n\n*/\n\n\nvar brackets = (function(orig) {\n\n  var cachedBrackets,\n      r,\n      b,\n      re = /[{}]/g\n\n  return function(x) {\n\n    // make sure we use the current setting\n    var s = riot.settings.brackets || orig\n\n    // recreate cached vars if needed\n    if (cachedBrackets !== s) {\n      cachedBrackets = s\n      b = s.split(' ')\n      r = b.map(function (e) { return e.replace(/(?=.)/g, '\\\\') })\n    }\n\n    // if regexp given, rewrite it with current brackets (only if differ from default)\n    return x instanceof RegExp ? (\n        s === orig ? x :\n        new RegExp(x.source.replace(re, function(b) { return r[~~(b === '}')] }), x.global ? 'g' : '')\n      ) :\n      // else, get specific bracket\n      b[x]\n  }\n})('{ }')\n\n\nvar tmpl = (function() {\n\n  var cache = {},\n      OGLOB = '\"in d?d:' + (window ? 'window).' : 'global).'),\n      reVars =\n      /(['\"\\/])(?:[^\\\\]*?|\\\\.|.)*?\\1|\\.\\w*|\\w*:|\\b(?:(?:new|typeof|in|instanceof) |(?:this|true|false|null|undefined)\\b|function\\s*\\()|([A-Za-z_$]\\w*)/g\n\n  // build a template (or get it from cache), render with data\n  return function(str, data) {\n    return str && (cache[str] || (cache[str] = tmpl(str)))(data)\n  }\n\n\n  // create a template instance\n\n  function tmpl(s, p) {\n\n    if (s.indexOf(brackets(0)) < 0) {\n      // return raw text\n      s = s.replace(/\\n|\\r\\n?/g, '\\n')\n      return function () { return s }\n    }\n\n    // temporarily convert \\{ and \\} to a non-character\n    s = s\n      .replace(brackets(/\\\\{/g), '\\uFFF0')\n      .replace(brackets(/\\\\}/g), '\\uFFF1')\n\n    // split string to expression and non-expresion parts\n    p = split(s, extract(s, brackets(/{/), brackets(/}/)))\n\n    // is it a single expression or a template? i.e. {x} or <b>{x}</b>\n    s = (p.length === 2 && !p[0]) ?\n\n      // if expression, evaluate it\n      expr(p[1]) :\n\n      // if template, evaluate all expressions in it\n      '[' + p.map(function(s, i) {\n\n        // is it an expression or a string (every second part is an expression)\n        return i % 2 ?\n\n          // evaluate the expressions\n          expr(s, true) :\n\n          // process string parts of the template:\n          '\"' + s\n\n            // preserve new lines\n            .replace(/\\n|\\r\\n?/g, '\\\\n')\n\n            // escape quotes\n            .replace(/\"/g, '\\\\\"') +\n\n          '\"'\n\n      }).join(',') + '].join(\"\")'\n\n    return new Function('d', 'return ' + s\n      // bring escaped { and } back\n      .replace(/\\uFFF0/g, brackets(0))\n      .replace(/\\uFFF1/g, brackets(1)) + ';')\n\n  }\n\n\n  // parse { ... } expression\n\n  function expr(s, n) {\n    s = s\n\n      // convert new lines to spaces\n      .replace(/\\n|\\r\\n?/g, ' ')\n\n      // trim whitespace, brackets, strip comments\n      .replace(brackets(/^[{ ]+|[ }]+$|\\/\\*.+?\\*\\//g), '')\n\n    // is it an object literal? i.e. { key : value }\n    return /^\\s*[\\w- \"']+ *:/.test(s) ?\n\n      // if object literal, return trueish keys\n      // e.g.: { show: isOpen(), done: item.done } -> \"show done\"\n      '[' +\n\n          // extract key:val pairs, ignoring any nested objects\n          extract(s,\n\n              // name part: name:, \"name\":, 'name':, name :\n              /[\"' ]*[\\w- ]+[\"' ]*:/,\n\n              // expression part: everything upto a comma followed by a name (see above) or end of line\n              /,(?=[\"' ]*[\\w- ]+[\"' ]*:)|}|$/\n              ).map(function(pair) {\n\n                // get key, val parts\n                return pair.replace(/^[ \"']*(.+?)[ \"']*: *(.+?),? *$/, function(_, k, v) {\n\n                  // wrap all conditional parts to ignore errors\n                  return v.replace(/[^&|=!><]+/g, wrap) + '?\"' + k + '\":\"\",'\n\n                })\n\n              }).join('') +\n\n        '].join(\" \").trim()' :\n\n      // if js expression, evaluate as javascript\n      wrap(s, n)\n\n  }\n\n\n  // execute js w/o breaking on errors or undefined vars\n\n  function wrap(s, nonull) {\n    s = s.trim()\n    return !s ? '' : '(function(v){try{v=' +\n\n      // prefix vars (name => data.name)\n      s.replace(reVars, function(s, _, v) { return v ? '((\"' + v + OGLOB + v + ')' : s }) +\n\n      // default to empty string for falsy values except zero\n      '}catch(e){}return ' + (nonull === true ? '!v&&v!==0?\"\":v' : 'v') + '}).call(d)'\n  }\n\n\n  // split string by an array of substrings\n\n  function split(str, substrings) {\n    var parts = []\n    substrings.map(function(sub, i) {\n\n      // push matched expression and part before it\n      i = str.indexOf(sub)\n      parts.push(str.slice(0, i), sub)\n      str = str.slice(i + sub.length)\n    })\n    if (str) parts.push(str)\n\n    // push the remaining part\n    return parts\n  }\n\n\n  // match strings between opening and closing regexp, skipping any inner/nested matches\n\n  function extract(str, open, close) {\n\n    var start,\n        level = 0,\n        matches = [],\n        re = new RegExp('(' + open.source + ')|(' + close.source + ')', 'g')\n\n    str.replace(re, function(_, open, close, pos) {\n\n      // if outer inner bracket, mark position\n      if (!level && open) start = pos\n\n      // in(de)crease bracket level\n      level += open ? 1 : -1\n\n      // if outer closing bracket, grab the match\n      if (!level && close != null) matches.push(str.slice(start, pos + close.length))\n\n    })\n\n    return matches\n  }\n\n})()\n\n/*\n  lib/browser/tag/mkdom.js\n\n  Includes hacks needed for the Internet Explorer version 9 and bellow\n\n*/\n// http://kangax.github.io/compat-table/es5/#ie8\n// http://codeplanet.io/dropping-ie8/\n\nvar mkdom = (function (checkIE) {\n\n  var rootEls = {\n        'tr': 'tbody',\n        'th': 'tr',\n        'td': 'tr',\n        'tbody': 'table',\n        'col': 'colgroup'\n      },\n      GENERIC = 'div'\n\n  checkIE = checkIE && checkIE < 10\n\n  // creates any dom element in a div, table, or colgroup container\n  function _mkdom(html) {\n\n    var match = html && html.match(/^\\s*<([-\\w]+)/),\n        tagName = match && match[1].toLowerCase(),\n        rootTag = rootEls[tagName] || GENERIC,\n        el = mkEl(rootTag)\n\n    el.stub = true\n\n    if (checkIE && tagName && (match = tagName.match(SPECIAL_TAGS_REGEX)))\n      ie9elem(el, html, tagName, !!match[1])\n    else\n      el.innerHTML = html\n\n    return el\n  }\n\n  // creates tr, th, td, option, optgroup element for IE8-9\n  /* istanbul ignore next */\n  function ie9elem(el, html, tagName, select) {\n\n    var div = mkEl(GENERIC),\n        tag = select ? 'select>' : 'table>',\n        child\n\n    div.innerHTML = '<' + tag + html + '</' + tag\n\n    child = div.getElementsByTagName(tagName)[0]\n    if (child)\n      el.appendChild(child)\n\n  }\n  // end ie9elem()\n\n  return _mkdom\n\n})(IE_VERSION)\n\n// { key, i in items} -> { key, i, items }\nfunction loopKeys(expr) {\n  var b0 = brackets(0),\n      els = expr.trim().slice(b0.length).match(/^\\s*(\\S+?)\\s*(?:,\\s*(\\S+))?\\s+in\\s+(.+)$/)\n  return els ? { key: els[1], pos: els[2], val: b0 + els[3] } : { val: expr }\n}\n\nfunction mkitem(expr, key, val) {\n  var item = {}\n  item[expr.key] = key\n  if (expr.pos) item[expr.pos] = val\n  return item\n}\n\n\n/* Beware: heavy stuff */\nfunction _each(dom, parent, expr) {\n\n  remAttr(dom, 'each')\n\n  var tagName = getTagName(dom),\n      template = dom.outerHTML,\n      hasImpl = !!tagImpl[tagName],\n      impl = tagImpl[tagName] || {\n        tmpl: template\n      },\n      root = dom.parentNode,\n      placeholder = document.createComment('riot placeholder'),\n      tags = [],\n      child = getTag(dom),\n      checksum\n\n  root.insertBefore(placeholder, dom)\n\n  expr = loopKeys(expr)\n\n  // clean template code\n  parent\n    .one('premount', function () {\n      if (root.stub) root = parent.root\n      // remove the original DOM node\n      dom.parentNode.removeChild(dom)\n    })\n    .on('update', function () {\n      var items = tmpl(expr.val, parent)\n\n      // object loop. any changes cause full redraw\n      if (!isArray(items)) {\n\n        checksum = items ? JSON.stringify(items) : ''\n\n        items = !items ? [] :\n          Object.keys(items).map(function (key) {\n            return mkitem(expr, key, items[key])\n          })\n      }\n\n      var frag = document.createDocumentFragment(),\n          i = tags.length,\n          j = items.length\n\n      // unmount leftover items\n      while (i > j) {\n        tags[--i].unmount()\n        tags.splice(i, 1)\n      }\n\n      for (i = 0; i < j; ++i) {\n        var _item = !checksum && !!expr.key ? mkitem(expr, items[i], i) : items[i]\n\n        if (!tags[i]) {\n          // mount new\n          (tags[i] = new Tag(impl, {\n              parent: parent,\n              isLoop: true,\n              hasImpl: hasImpl,\n              root: SPECIAL_TAGS_REGEX.test(tagName) ? root : dom.cloneNode(),\n              item: _item\n            }, dom.innerHTML)\n          ).mount()\n\n          frag.appendChild(tags[i].root)\n        } else\n          tags[i].update(_item)\n\n        tags[i]._item = _item\n\n      }\n\n      root.insertBefore(frag, placeholder)\n\n      if (child) parent.tags[tagName] = tags\n\n    }).one('updated', function() {\n      var keys = Object.keys(parent)// only set new values\n      walk(root, function(node) {\n        // only set element node and not isLoop\n        if (node.nodeType == 1 && !node.isLoop && !node._looped) {\n          node._visited = false // reset _visited for loop node\n          node._looped = true // avoid set multiple each\n          setNamed(node, parent, keys)\n        }\n      })\n    })\n\n}\n\n\nfunction parseNamedElements(root, tag, childTags) {\n\n  walk(root, function(dom) {\n    if (dom.nodeType == 1) {\n      dom.isLoop = dom.isLoop || (dom.parentNode && dom.parentNode.isLoop || dom.getAttribute('each')) ? 1 : 0\n\n      // custom child tag\n      var child = getTag(dom)\n\n      if (child && !dom.isLoop) {\n        childTags.push(initChildTag(child, dom, tag))\n      }\n\n      if (!dom.isLoop)\n        setNamed(dom, tag, [])\n    }\n\n  })\n\n}\n\nfunction parseExpressions(root, tag, expressions) {\n\n  function addExpr(dom, val, extra) {\n    if (val.indexOf(brackets(0)) >= 0) {\n      var expr = { dom: dom, expr: val }\n      expressions.push(extend(expr, extra))\n    }\n  }\n\n  walk(root, function(dom) {\n    var type = dom.nodeType\n\n    // text node\n    if (type == 3 && dom.parentNode.tagName != 'STYLE') addExpr(dom, dom.nodeValue)\n    if (type != 1) return\n\n    /* element */\n\n    // loop\n    var attr = dom.getAttribute('each')\n\n    if (attr) { _each(dom, tag, attr); return false }\n\n    // attribute expressions\n    each(dom.attributes, function(attr) {\n      var name = attr.name,\n        bool = name.split('__')[1]\n\n      addExpr(dom, attr.value, { attr: bool || name, bool: bool })\n      if (bool) { remAttr(dom, name); return false }\n\n    })\n\n    // skip custom tags\n    if (getTag(dom)) return false\n\n  })\n\n}\nfunction Tag(impl, conf, innerHTML) {\n\n  var self = riot.observable(this),\n      opts = inherit(conf.opts) || {},\n      dom = mkdom(impl.tmpl),\n      parent = conf.parent,\n      isLoop = conf.isLoop,\n      hasImpl = conf.hasImpl,\n      item = cleanUpData(conf.item),\n      expressions = [],\n      childTags = [],\n      root = conf.root,\n      fn = impl.fn,\n      tagName = root.tagName.toLowerCase(),\n      attr = {},\n      propsInSyncWithParent = []\n\n  if (fn && root._tag) {\n    root._tag.unmount(true)\n  }\n\n  // not yet mounted\n  this.isMounted = false\n  root.isLoop = isLoop\n\n  // keep a reference to the tag just created\n  // so we will be able to mount this tag multiple times\n  root._tag = this\n\n  // create a unique id to this tag\n  // it could be handy to use it also to improve the virtual dom rendering speed\n  this._id = __uid++\n\n  extend(this, { parent: parent, root: root, opts: opts, tags: {} }, item)\n\n  // grab attributes\n  each(root.attributes, function(el) {\n    var val = el.value\n    // remember attributes with expressions only\n    if (brackets(/{.*}/).test(val)) attr[el.name] = val\n  })\n\n  if (dom.innerHTML && !/^(select|optgroup|table|tbody|tr|col(?:group)?)$/.test(tagName))\n    // replace all the yield tags with the tag inner html\n    dom.innerHTML = replaceYield(dom.innerHTML, innerHTML)\n\n  // options\n  function updateOpts() {\n    var ctx = hasImpl && isLoop ? self : parent || self\n\n    // update opts from current DOM attributes\n    each(root.attributes, function(el) {\n      opts[el.name] = tmpl(el.value, ctx)\n    })\n    // recover those with expressions\n    each(Object.keys(attr), function(name) {\n      opts[name] = tmpl(attr[name], ctx)\n    })\n  }\n\n  function normalizeData(data) {\n    for (var key in item) {\n      if (typeof self[key] !== T_UNDEF)\n        self[key] = data[key]\n    }\n  }\n\n  function inheritFromParent () {\n    if (!self.parent || !isLoop) return\n    each(Object.keys(self.parent), function(k) {\n      // some properties must be always in sync with the parent tag\n      var mustSync = !~RESERVED_WORDS_BLACKLIST.indexOf(k) && ~propsInSyncWithParent.indexOf(k)\n      if (typeof self[k] === T_UNDEF || mustSync) {\n        // track the property to keep in sync\n        // so we can keep it updated\n        if (!mustSync) propsInSyncWithParent.push(k)\n        self[k] = self.parent[k]\n      }\n    })\n  }\n\n  this.update = function(data) {\n    // make sure the data passed will not override\n    // the component core methods\n    data = cleanUpData(data)\n    // inherit properties from the parent\n    inheritFromParent()\n    // normalize the tag properties in case an item object was initially passed\n    if (data && typeof item === T_OBJECT) {\n      normalizeData(data)\n      item = data\n    }\n    extend(self, data)\n    updateOpts()\n    self.trigger('update', data)\n    update(expressions, self)\n    self.trigger('updated')\n  }\n\n  this.mixin = function() {\n    each(arguments, function(mix) {\n      mix = typeof mix === T_STRING ? riot.mixin(mix) : mix\n      each(Object.keys(mix), function(key) {\n        // bind methods to self\n        if (key != 'init')\n          self[key] = isFunction(mix[key]) ? mix[key].bind(self) : mix[key]\n      })\n      // init method will be called automatically\n      if (mix.init) mix.init.bind(self)()\n    })\n  }\n\n  this.mount = function() {\n\n    updateOpts()\n\n    // initialiation\n    if (fn) fn.call(self, opts)\n\n    // parse layout after init. fn may calculate args for nested custom tags\n    parseExpressions(dom, self, expressions)\n\n    // mount the child tags\n    toggle(true)\n\n    // update the root adding custom attributes coming from the compiler\n    // it fixes also #1087\n    if (impl.attrs || hasImpl) {\n      walkAttributes(impl.attrs, function (k, v) { root.setAttribute(k, v) })\n      parseExpressions(self.root, self, expressions)\n    }\n\n    if (!self.parent || isLoop) self.update(item)\n\n    // internal use only, fixes #403\n    self.trigger('premount')\n\n    if (isLoop && !hasImpl) {\n      // update the root attribute for the looped elements\n      self.root = root = dom.firstChild\n\n    } else {\n      while (dom.firstChild) root.appendChild(dom.firstChild)\n      if (root.stub) self.root = root = parent.root\n    }\n    // if it's not a child tag we can trigger its mount event\n    if (!self.parent || self.parent.isMounted) {\n      self.isMounted = true\n      self.trigger('mount')\n    }\n    // otherwise we need to wait that the parent event gets triggered\n    else self.parent.one('mount', function() {\n      // avoid to trigger the `mount` event for the tags\n      // not visible included in an if statement\n      if (!isInStub(self.root)) {\n        self.parent.isMounted = self.isMounted = true\n        self.trigger('mount')\n      }\n    })\n  }\n\n\n  this.unmount = function(keepRootTag) {\n    var el = root,\n        p = el.parentNode,\n        ptag\n\n    if (p) {\n\n      if (parent) {\n        ptag = getImmediateCustomParentTag(parent)\n        // remove this tag from the parent tags object\n        // if there are multiple nested tags with same name..\n        // remove this element form the array\n        if (isArray(ptag.tags[tagName]))\n          each(ptag.tags[tagName], function(tag, i) {\n            if (tag._id == self._id)\n              ptag.tags[tagName].splice(i, 1)\n          })\n        else\n          // otherwise just delete the tag instance\n          ptag.tags[tagName] = undefined\n      }\n\n      else\n        while (el.firstChild) el.removeChild(el.firstChild)\n\n      if (!keepRootTag)\n        p.removeChild(el)\n      else\n        // the riot-tag attribute isn't needed anymore, remove it\n        p.removeAttribute('riot-tag')\n    }\n\n\n    self.trigger('unmount')\n    toggle()\n    self.off('*')\n    // somehow ie8 does not like `delete root._tag`\n    root._tag = null\n\n  }\n\n  function toggle(isMount) {\n\n    // mount/unmount children\n    each(childTags, function(child) { child[isMount ? 'mount' : 'unmount']() })\n\n    // listen/unlisten parent (events flow one way from parent to children)\n    if (parent) {\n      var evt = isMount ? 'on' : 'off'\n\n      // the loop tags will be always in sync with the parent automatically\n      if (isLoop)\n        parent[evt]('unmount', self.unmount)\n      else\n        parent[evt]('update', self.update)[evt]('unmount', self.unmount)\n    }\n  }\n\n  // named elements available for fn\n  parseNamedElements(dom, this, childTags)\n\n\n}\n\nfunction setEventHandler(name, handler, dom, tag) {\n\n  dom[name] = function(e) {\n\n    var item = tag._item,\n        ptag = tag.parent,\n        el\n\n    if (!item)\n      while (ptag && !item) {\n        item = ptag._item\n        ptag = ptag.parent\n      }\n\n    // cross browser event fix\n    e = e || window.event\n\n    // ignore error on some browsers\n    try {\n      e.currentTarget = dom\n      if (!e.target) e.target = e.srcElement\n      if (!e.which) e.which = e.charCode || e.keyCode\n    } catch (ignored) { /**/ }\n\n    e.item = item\n\n    // prevent default behaviour (by default)\n    if (handler.call(tag, e) !== true && !/radio|check/.test(dom.type)) {\n      if (e.preventDefault) e.preventDefault()\n      e.returnValue = false\n    }\n\n    if (!e.preventUpdate) {\n      el = item ? getImmediateCustomParentTag(ptag) : tag\n      el.update()\n    }\n\n  }\n\n}\n\n// used by if- attribute\nfunction insertTo(root, node, before) {\n  if (root) {\n    root.insertBefore(before, node)\n    root.removeChild(node)\n  }\n}\n\nfunction update(expressions, tag) {\n\n  each(expressions, function(expr, i) {\n\n    var dom = expr.dom,\n        attrName = expr.attr,\n        value = tmpl(expr.expr, tag),\n        parent = expr.dom.parentNode\n\n    if (expr.bool)\n      value = value ? attrName : false\n    else if (value == null)\n      value = ''\n\n    // leave out riot- prefixes from strings inside textarea\n    // fix #815: any value -> string\n    if (parent && parent.tagName == 'TEXTAREA') value = ('' + value).replace(/riot-/g, '')\n\n    // no change\n    if (expr.value === value) return\n    expr.value = value\n\n    // text node\n    if (!attrName) {\n      dom.nodeValue = '' + value    // #815 related\n      return\n    }\n\n    // remove original attribute\n    remAttr(dom, attrName)\n    // event handler\n    if (isFunction(value)) {\n      setEventHandler(attrName, value, dom, tag)\n\n    // if- conditional\n    } else if (attrName == 'if') {\n      var stub = expr.stub,\n          add = function() { insertTo(stub.parentNode, stub, dom) },\n          remove = function() { insertTo(dom.parentNode, dom, stub) }\n\n      // add to DOM\n      if (value) {\n        if (stub) {\n          add()\n          dom.inStub = false\n          // avoid to trigger the mount event if the tags is not visible yet\n          // maybe we can optimize this avoiding to mount the tag at all\n          if (!isInStub(dom)) {\n            walk(dom, function(el) {\n              if (el._tag && !el._tag.isMounted) el._tag.isMounted = !!el._tag.trigger('mount')\n            })\n          }\n        }\n      // remove from DOM\n      } else {\n        stub = expr.stub = stub || document.createTextNode('')\n        // if the parentNode is defined we can easily replace the tag\n        if (dom.parentNode)\n          remove()\n        else\n        // otherwise we need to wait the updated event\n          (tag.parent || tag).one('updated', remove)\n\n        dom.inStub = true\n      }\n    // show / hide\n    } else if (/^(show|hide)$/.test(attrName)) {\n      if (attrName == 'hide') value = !value\n      dom.style.display = value ? '' : 'none'\n\n    // field value\n    } else if (attrName == 'value') {\n      dom.value = value\n\n    // <img src=\"{ expr }\">\n    } else if (startsWith(attrName, RIOT_PREFIX) && attrName != RIOT_TAG) {\n      if (value)\n        dom.setAttribute(attrName.slice(RIOT_PREFIX.length), value)\n\n    } else {\n      if (expr.bool) {\n        dom[attrName] = value\n        if (!value) return\n      }\n\n      if (typeof value !== T_OBJECT) dom.setAttribute(attrName, value)\n\n    }\n\n  })\n\n}\nfunction each(els, fn) {\n  for (var i = 0, len = (els || []).length, el; i < len; i++) {\n    el = els[i]\n    // return false -> remove current item during loop\n    if (el != null && fn(el, i) === false) i--\n  }\n  return els\n}\n\nfunction isFunction(v) {\n  return typeof v === T_FUNCTION || false   // avoid IE problems\n}\n\nfunction remAttr(dom, name) {\n  dom.removeAttribute(name)\n}\n\nfunction getTag(dom) {\n  return dom.tagName && tagImpl[dom.getAttribute(RIOT_TAG) || dom.tagName.toLowerCase()]\n}\n\nfunction initChildTag(child, dom, parent) {\n  var tag = new Tag(child, { root: dom, parent: parent }, dom.innerHTML),\n      tagName = getTagName(dom),\n      ptag = getImmediateCustomParentTag(parent),\n      cachedTag\n\n  // fix for the parent attribute in the looped elements\n  tag.parent = ptag\n\n  cachedTag = ptag.tags[tagName]\n\n  // if there are multiple children tags having the same name\n  if (cachedTag) {\n    // if the parent tags property is not yet an array\n    // create it adding the first cached tag\n    if (!isArray(cachedTag))\n      ptag.tags[tagName] = [cachedTag]\n    // add the new nested tag to the array\n    if (!~ptag.tags[tagName].indexOf(tag))\n      ptag.tags[tagName].push(tag)\n  } else {\n    ptag.tags[tagName] = tag\n  }\n\n  // empty the child node once we got its template\n  // to avoid that its children get compiled multiple times\n  dom.innerHTML = ''\n\n  return tag\n}\n\nfunction getImmediateCustomParentTag(tag) {\n  var ptag = tag\n  while (!getTag(ptag.root)) {\n    if (!ptag.parent) break\n    ptag = ptag.parent\n  }\n  return ptag\n}\n\nfunction getTagName(dom) {\n  var child = getTag(dom),\n    namedTag = dom.getAttribute('name'),\n    tagName = namedTag && namedTag.indexOf(brackets(0)) < 0 ? namedTag : child ? child.name : dom.tagName.toLowerCase()\n\n  return tagName\n}\n\nfunction extend(src) {\n  var obj, args = arguments\n  for (var i = 1; i < args.length; ++i) {\n    if ((obj = args[i])) {\n      for (var key in obj) {      // eslint-disable-line guard-for-in\n        src[key] = obj[key]\n      }\n    }\n  }\n  return src\n}\n\n// with this function we avoid that the current Tag methods get overridden\nfunction cleanUpData(data) {\n  if (!(data instanceof Tag) && !(data && typeof data.trigger == T_FUNCTION)) return data\n\n  var o = {}\n  for (var key in data) {\n    if (!~RESERVED_WORDS_BLACKLIST.indexOf(key))\n      o[key] = data[key]\n  }\n  return o\n}\n\nfunction walk(dom, fn) {\n  if (dom) {\n    if (fn(dom) === false) return\n    else {\n      dom = dom.firstChild\n\n      while (dom) {\n        walk(dom, fn)\n        dom = dom.nextSibling\n      }\n    }\n  }\n}\n\n// minimize risk: only zero or one _space_ between attr & value\nfunction walkAttributes(html, fn) {\n  var m,\n      re = /([-\\w]+) ?= ?(?:\"([^\"]*)|'([^']*)|({[^}]*}))/g\n\n  while ((m = re.exec(html))) {\n    fn(m[1].toLowerCase(), m[2] || m[3] || m[4])\n  }\n}\n\nfunction isInStub(dom) {\n  while (dom) {\n    if (dom.inStub) return true\n    dom = dom.parentNode\n  }\n  return false\n}\n\nfunction mkEl(name) {\n  return document.createElement(name)\n}\n\nfunction replaceYield(tmpl, innerHTML) {\n  return tmpl.replace(/<(yield)\\/?>(<\\/\\1>)?/gi, innerHTML || '')\n}\n\nfunction $$(selector, ctx) {\n  return (ctx || document).querySelectorAll(selector)\n}\n\nfunction $(selector, ctx) {\n  return (ctx || document).querySelector(selector)\n}\n\nfunction inherit(parent) {\n  function Child() {}\n  Child.prototype = parent\n  return new Child()\n}\n\nfunction setNamed(dom, parent, keys) {\n  if (dom._visited) return\n  var p,\n      v = dom.getAttribute('id') || dom.getAttribute('name')\n\n  if (v) {\n    if (keys.indexOf(v) < 0) {\n      p = parent[v]\n      if (!p)\n        parent[v] = dom\n      else if (isArray(p))\n        p.push(dom)\n      else\n        parent[v] = [p, dom]\n    }\n    dom._visited = true\n  }\n}\n\n// faster String startsWith alternative\nfunction startsWith(src, str) {\n  return src.slice(0, str.length) === str\n}\n\n/*\n Virtual dom is an array of custom tags on the document.\n Updates and unmounts propagate downwards from parent to children.\n*/\n\nvar virtualDom = [],\n    tagImpl = {},\n    styleNode\n\nfunction injectStyle(css) {\n\n  if (riot.render) return // skip injection on the server\n\n  if (!styleNode) {\n    styleNode = mkEl('style')\n    styleNode.setAttribute('type', 'text/css')\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0]\n\n  if (styleNode.styleSheet)\n    styleNode.styleSheet.cssText += css\n  else\n    styleNode.innerHTML += css\n\n  if (!styleNode._rendered)\n    if (styleNode.styleSheet) {\n      document.body.appendChild(styleNode)\n    } else {\n      var rs = $('style[type=riot]')\n      if (rs) {\n        rs.parentNode.insertBefore(styleNode, rs)\n        rs.parentNode.removeChild(rs)\n      } else head.appendChild(styleNode)\n\n    }\n\n  styleNode._rendered = true\n\n}\n\nfunction mountTo(root, tagName, opts) {\n  var tag = tagImpl[tagName],\n      // cache the inner HTML to fix #855\n      innerHTML = root._innerHTML = root._innerHTML || root.innerHTML\n\n  // clear the inner html\n  root.innerHTML = ''\n\n  if (tag && root) tag = new Tag(tag, { root: root, opts: opts }, innerHTML)\n\n  if (tag && tag.mount) {\n    tag.mount()\n    virtualDom.push(tag)\n    return tag.on('unmount', function() {\n      virtualDom.splice(virtualDom.indexOf(tag), 1)\n    })\n  }\n\n}\n\nriot.tag = function(name, html, css, attrs, fn) {\n  if (isFunction(attrs)) {\n    fn = attrs\n    if (/^[\\w\\-]+\\s?=/.test(css)) {\n      attrs = css\n      css = ''\n    } else attrs = ''\n  }\n  if (css) {\n    if (isFunction(css)) fn = css\n    else injectStyle(css)\n  }\n  tagImpl[name] = { name: name, tmpl: html, attrs: attrs, fn: fn }\n  return name\n}\n\nriot.mount = function(selector, tagName, opts) {\n\n  var els,\n      allTags,\n      tags = []\n\n  // helper functions\n\n  function addRiotTags(arr) {\n    var list = ''\n    each(arr, function (e) {\n      list += ', *[' + RIOT_TAG + '=\"' + e.trim() + '\"]'\n    })\n    return list\n  }\n\n  function selectAllTags() {\n    var keys = Object.keys(tagImpl)\n    return keys + addRiotTags(keys)\n  }\n\n  function pushTags(root) {\n    var last\n    if (root.tagName) {\n      if (tagName && (!(last = root.getAttribute(RIOT_TAG)) || last != tagName))\n        root.setAttribute(RIOT_TAG, tagName)\n\n      var tag = mountTo(root,\n        tagName || root.getAttribute(RIOT_TAG) || root.tagName.toLowerCase(), opts)\n\n      if (tag) tags.push(tag)\n    }\n    else if (root.length) {\n      each(root, pushTags)   // assume nodeList\n    }\n  }\n\n  // ----- mount code -----\n\n  if (typeof tagName === T_OBJECT) {\n    opts = tagName\n    tagName = 0\n  }\n\n  // crawl the DOM to find the tag\n  if (typeof selector === T_STRING) {\n    if (selector === '*')\n      // select all the tags registered\n      // and also the tags found with the riot-tag attribute set\n      selector = allTags = selectAllTags()\n    else\n      // or just the ones named like the selector\n      selector += addRiotTags(selector.split(','))\n\n    els = $$(selector)\n  }\n  else\n    // probably you have passed already a tag or a NodeList\n    els = selector\n\n  // select all the registered and mount them inside their root elements\n  if (tagName === '*') {\n    // get all custom tags\n    tagName = allTags || selectAllTags()\n    // if the root els it's just a single tag\n    if (els.tagName)\n      els = $$(tagName, els)\n    else {\n      // select all the children for all the different root elements\n      var nodeList = []\n      each(els, function (_el) {\n        nodeList.push($$(tagName, _el))\n      })\n      els = nodeList\n    }\n    // get rid of the tagName\n    tagName = 0\n  }\n\n  if (els.tagName)\n    pushTags(els)\n  else\n    each(els, pushTags)\n\n  return tags\n}\n\n// update everything\nriot.update = function() {\n  return each(virtualDom, function(tag) {\n    tag.update()\n  })\n}\n\n// @deprecated\nriot.mountTo = riot.mount\n\n  // share methods for other riot parts, e.g. compiler\n  riot.util = { brackets: brackets, tmpl: tmpl }\n\n  // support CommonJS, AMD & browser\n  /* istanbul ignore next */\n  if (typeof exports === T_OBJECT)\n    module.exports = riot\n  else if (typeof define === 'function' && define.amd)\n    define(function() { return (window.riot = riot) })\n  else\n    window.riot = riot\n\n})(typeof window != 'undefined' ? window : void 0);\n","\nvar riot = require('riot');\nvar todoTag = require('./riot-tags/to-do.tag');\nrequire('./riot-tags/item-list.tag');\nrequire('./riot-tags/basic-adder.tag');\n\nriot.mount('*');\n","var riot = require('riot');\nmodule.exports = riot.tag('basic-adder', '<form onsubmit=\"{submit}\" action=\"localhost:8080\"> <input type=\"text\" onkeyup=\"{changed}\"> <button type=\"submit\" __disabled=\"{!text}\">Add</button> </form>', function(opts) {\n    var input;\n    this.on('mount', function() {\n        input = this.root.querySelector('input');\n    });\n    this.changed = function(ev) {\n        this.text = ev.target.value;\n    }.bind(this);\n    this.submit = function(ev) {\n        ev.preventDefault();\n        this.parent.trigger('newitem', this.text);\n        this.text = \"\";\n        input.value = \"\";\n    }.bind(this);\n\n});\n","var riot = require('riot');\nmodule.exports = riot.tag('item-list', '<ul> <li each=\"{items}\" class=\"{completed: date}\"> <label><input type=\"checkbox\" __checked=\"{date}\" onchange=\"{parent.itemCompleted}\"> {title}<small if=\"{date}\"> {date}</small></label> <button type=\"button\" onclick=\"{parent.itemDelete}\">X</button> </li> </ul>', function(opts) {\n    this.items = [{title:\"Example\"}];\n    this.parent.on('newitem', (function(item) {\n        this.items.push({title: item, date: null});\n        this.update();\n    }).bind(this));\n    this.itemDelete = function(ev) {\n        var item = ev.item;\n        var index = this.items.indexOf(item);\n        this.items.splice(index, 1);\n    }.bind(this);\n    this.itemCompleted = function(ev) {\n        var item = ev.item;\n        if(ev.target.checked) {\n            item.date = new Date();\n        }\n        else {\n            item.date = null;\n        }\n    }.bind(this);\n\n});\n","var riot = require('riot');\nmodule.exports = riot.tag('to-do', '<h2>Things to do:</h2> <item-list></item-list> <basic-adder></basic-adder>', function(opts) {\n    riot.observable(this);\n\n});\n"]}